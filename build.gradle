import net.minecraftforge.gradleutils.PomUtils

plugins {
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'net.minecraftforge.gradleutils' version '[2.1.2,)'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
}

group 'net.minecraftforge'
version = gradleutils.tagOffsetVersion
println("Version: $version")

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

dependencies {
    implementation(libs.unsafe)
    implementation(libs.securemodules)
    implementation(project(':bs-api'))
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
    withSourcesJar()
}

license {
    header = file("LICENSE-header.txt")
    newLine = false
}

tasks.named('jar', Jar) {
    manifest.attributes([
        'Specification-Title':   'BootStrap',
        'Specification-Vendor':  'Forge Development LLC',
        'Specification-Version':  gradleutils.gitInfo.tag,
        'Implementation-Title':   project.name,
        'Implementation-Vendor': 'Forge Development LLC',
        'Implementation-Version': project.version
    ] as java.util.LinkedHashMap, 'net/minecraftforge/bootstrap/')
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        from components.java
        artifactId = 'bootstrap'
        pom {
            name = 'Bootstrap'
            description = 'Allows bootstrapping a modularized environment from a classpath one, the intention is for this to be a project where we can bootstrap many different environments of Forge.'
            url = 'https://github.com/MinecraftForge/Bootstrap'
            PomUtils.setGitHubDetails(pom, 'Bootstrap')
            license PomUtils.Licenses.LGPLv3

            developers {
                developer PomUtils.Developers.LexManos
            }
        }
    }
    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

// Hack eclipse into knowing that the gradle deps are modules
eclipse.classpath {
    containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
    file.whenMerged { entries.findAll { it.kind == 'lib' || it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each { it.entryAttributes['module'] = 'true' } }
}
